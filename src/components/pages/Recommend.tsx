import React, { useState, useEffect } from "react";
import LottoNumberBall from "../shared/LottoNumberBall";
import {
  lottoRecommendService,
  RecommendStrategy,
} from "../../services/lottoRecommendService";

// Ïª§Ïä§ÌÖÄ ÌåùÏóÖ Ïª¥Ìè¨ÎÑåÌä∏
interface PopupProps {
  isOpen: boolean;
  onClose: () => void;
  message: string;
  type?: "success" | "error" | "info";
  theme?: "light" | "dark";
}

const CustomPopup: React.FC<PopupProps> = ({ isOpen, onClose, message, type = "success", theme = "light" }) => {
  useEffect(() => {
    if (isOpen) {
      const timer = setTimeout(() => {
        onClose();
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  const colors = {
    light: {
      overlay: "rgba(0, 0, 0, 0.5)",
      background: "#ffffff",
      text: "#1f2937",
      border: "#e5e7eb",
    },
    dark: {
      overlay: "rgba(0, 0, 0, 0.7)",
      background: "#1e293b",
      text: "#f1f5f9",
      border: "#334155",
    },
  };

  const currentColors = colors[theme];

  return (
    <div
      onClick={onClose}
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: currentColors.overlay,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 9999,
        animation: "fadeIn 0.2s ease-out",
      }}
    >
      <div
        onClick={(e) => e.stopPropagation()}
        style={{
          backgroundColor: currentColors.background,
          borderRadius: "12px",
          padding: "20px 24px",
          minWidth: "280px",
          maxWidth: "90%",
          boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
          border: `1px solid ${currentColors.border}`,
          animation: "slideUp 0.3s ease-out",
          textAlign: "center",
        }}
      >
        <div style={{ fontSize: "48px", marginBottom: "12px" }}>
          {type === "success" ? "‚úÖ" : type === "error" ? "‚ùå" : "‚ÑπÔ∏è"}
        </div>
        <div
          style={{
            fontSize: "16px",
            color: currentColors.text,
            lineHeight: "1.5",
            whiteSpace: "pre-line",
          }}
        >
          {message}
        </div>
      </div>
      
      <style>
        {`
          @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
          }
          @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
          }
        `}
      </style>
    </div>
  );
};

interface RecommendProps {
  pastWinningNumbers: number[][];
  onAddToPurchaseHistory: (numbers: number[], strategy: string) => void;
  isDataLoading?: boolean;
  dataStatus?: any;
  roundRange?: {
    latestRound: number;
    oldestRound: number;
  };
  theme?: "light" | "dark";
  autoSave?: boolean;
}

const Recommend: React.FC<RecommendProps> = ({
  pastWinningNumbers,
  onAddToPurchaseHistory,
  isDataLoading,
  dataStatus,
  roundRange,
  theme = "light",
  autoSave = false,
}) => {
  const [activeGrade, setActiveGrade] = useState("1");
  const [recommendedStrategies, setRecommendedStrategies] = useState<
    RecommendStrategy[]
  >([]);
  const [loading, setLoading] = useState(false);
  const [analysisStats, setAnalysisStats] = useState<any>(null);
  const [showAnalysisDetail, setShowAnalysisDetail] = useState(false);
  const [hasGenerated, setHasGenerated] = useState(false);

  // ÌåùÏóÖ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [popup, setPopup] = useState<{ isOpen: boolean; message: string; type: "success" | "error" | "info" }>({ 
    isOpen: false, 
    message: "", 
    type: "success" 
  });

  const showPopup = (message: string, type: "success" | "error" | "info" = "success") => {
    setPopup({ isOpen: true, message, type });
  };

  const closePopup = () => {
    setPopup({ ...popup, isOpen: false });
  };

  // ÎèôÏ†Å ÌöåÏ∞® Í≥ÑÏÇ∞
  const totalRounds = pastWinningNumbers.length;
  const actualLatestRound = roundRange?.latestRound || 1178;
  const actualOldestRound = roundRange?.oldestRound || 1178;

  // ÏÉâÏÉÅ ÌÖåÎßà
  const colors = {
    light: {
      background: "#f9fafb",
      surface: "#ffffff",
      primary: "#2563eb",
      text: "#1f2937",
      textSecondary: "#6b7280",
      border: "#e5e7eb",
      accent: "#059669",
      gray: "#f9fafb",
      grayBorder: "#e5e7eb",
      gradientStart: "#059669",
      gradientEnd: "#0891b2",
    },
    dark: {
      background: "#0f172a",
      surface: "#1e293b",
      primary: "#3b82f6",
      text: "#f1f5f9",
      textSecondary: "#94a3b8",
      border: "#334155",
      accent: "#10b981",
      gray: "#334155",
      grayBorder: "#475569",
      gradientStart: "#10b981",
      gradientEnd: "#06b6d4",
    },
  };

  const currentColors = colors[theme];

  // ÎãπÏ≤® Îì±Í∏â Ï†ïÎ≥¥
  const gradeInfo: { [key: string]: any } = {
    "1": {
      name: "1Îì±",
      desc: "6Í∞ú Î≤àÌò∏ ÏùºÏπò",
      probability: "1/8,145,060",
      prize: "ÏïΩ 20ÏñµÏõê",
      strategy: `${actualLatestRound}~${actualOldestRound}ÌöåÏ∞® (${totalRounds}Í∞ú) ÎπÖÎç∞Ïù¥ÌÑ∞ AI ÏôÑÎ≤Ω Î∂ÑÏÑù`,
      emoji: "üëë",
      color: currentColors.accent,
    },
    "2": {
      name: "2Îì±",
      desc: "5Í∞ú Î≤àÌò∏ + Î≥¥ÎÑàÏä§ ÏùºÏπò",
      probability: "1/1,357,510",
      prize: "ÏïΩ 6Ï≤úÎßåÏõê",
      strategy: "Í≥†ÎπàÎèÑ + Î≥¥ÎÑàÏä§ Í≥†Î†§ Îã§Í∞ÅÎèÑ Î∂ÑÏÑù",
      emoji: "ü•à",
      color: "#0891b2",
    },
    "3": {
      name: "3Îì±",
      desc: "5Í∞ú Î≤àÌò∏ ÏùºÏπò",
      probability: "1/35,724",
      prize: "ÏïΩ 150ÎßåÏõê",
      strategy: "Í∑†Ìòï Î∂ÑÏÑù (5Í∞ú Ï†ÅÏ§ë Î™©Ìëú)",
      emoji: "ü•â",
      color: "#7c3aed",
    },
    "4": {
      name: "4Îì±",
      desc: "4Í∞ú Î≤àÌò∏ ÏùºÏπò",
      probability: "1/733",
      prize: "5ÎßåÏõê",
      strategy: "Ìå®ÌÑ¥ Î∂ÑÏÑù (4Í∞ú Ï†ÅÏ§ë Î™©Ìëú)",
      emoji: "üéØ",
      color: "#dc2626",
    },
    "5": {
      name: "5Îì±",
      desc: "3Í∞ú Î≤àÌò∏ ÏùºÏπò",
      probability: "1/45",
      prize: "5Ï≤úÏõê",
      strategy: "ÌôïÎ•† Ï§ëÏã¨ (3Í∞ú Ï†ÅÏ§ë Î™©Ìëú)",
      emoji: "üé≤",
      color: "#ea580c",
    },
  };

  // TWA Í¥ëÍ≥† ÏôÑÎ£å Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
  useEffect(() => {
    const handleAdReward = (event: any) => {
      console.log("üéÅ TWA Í¥ëÍ≥† ÏãúÏ≤≠ ÏôÑÎ£å:", event.detail);
      generate1stGradeRecommendationsAfterAd();
    };

    window.addEventListener('adRewardEarned', handleAdReward);
    return () => {
      window.removeEventListener('adRewardEarned', handleAdReward);
    };
  }, []);

  // Î∂ÑÏÑù ÌÜµÍ≥Ñ Î°úÎìú
  useEffect(() => {
    loadAnalysisStats();
    console.log("üéØ TWA Î≤àÌò∏Ï∂îÏ≤ú ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å");
  }, [totalRounds, roundRange]);

  const loadAnalysisStats = async () => {
    const stats = lottoRecommendService.getAnalysisStats();
    setAnalysisStats(stats);
  };

  // TWA Í¥ëÍ≥† ÏãúÏ≤≠ ÌõÑ 1Îì±Í∏â Ï∂îÏ≤ú ÏÉùÏÑ±
  const generate1stGradeRecommendations = async () => {
    console.log("üéØ 1Îì± Ï∂îÏ≤ú Î≤ÑÌäº ÌÅ¥Î¶≠ - TWA Í¥ëÍ≥† ÏãúÏûë");
    
    try {
      const windowWithAds = window as any;
      if (windowWithAds.showRewardedAd) {
        console.log("üì∫ TWA Í¥ëÍ≥† ÏãúÏûë");
        await windowWithAds.showRewardedAd();
      } else {
        console.log("‚ö†Ô∏è Í¥ëÍ≥† ÏãúÏä§ÌÖú ÏóÜÏùå, AI Î∂ÑÏÑù Î∞îÎ°ú ÏãúÏûë");
        generate1stGradeRecommendationsAfterAd();
      }
    } catch (error) {
      console.error("‚ùå Í¥ëÍ≥† Ïã§Ìå®:", error);
      showPopup("Í¥ëÍ≥†Î•º ÏãúÏ≤≠Ìï† Ïàò ÏóÜÏäµÎãàÎã§.\nÎ∞îÎ°ú AI Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï©ÎãàÎã§.", "info");
      generate1stGradeRecommendationsAfterAd();
    }
  };

  // Ïã§Ï†ú AI Î∂ÑÏÑù ÏàòÌñâ
  const generate1stGradeRecommendationsAfterAd = async () => {
    setLoading(true);
    setHasGenerated(true);

    try {
      console.log(`üß† TWA AI ÎπÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÏãúÏûë: ${totalRounds}Í∞ú ÌöåÏ∞®`);
      
      await new Promise((resolve) => setTimeout(resolve, 1500));

      const strategies = await lottoRecommendService.generate1stGradeRecommendations();
      setRecommendedStrategies(strategies);

      console.log(`‚úÖ ${strategies.length}Í∞ú AI Ï†ÑÎûµ ÏÉùÏÑ± ÏôÑÎ£å!`);

      // ÏûêÎèôÏ†ÄÏû•
      if (autoSave && strategies.length > 0) {
        const bestStrategy = strategies.reduce((best, current) =>
          current.confidence > best.confidence ? current : best
        );
        onAddToPurchaseHistory(bestStrategy.numbers, bestStrategy.name);
        setTimeout(() => {
          showPopup(`ÏûêÎèôÏ†ÄÏû• ÏôÑÎ£å!\n"${bestStrategy.name}" Î≤àÌò∏Í∞Ä ÎÇ¥Î≤àÌò∏Ìï®Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`);
        }, 500);
      }
    } catch (error) {
      console.error("‚ùå AI Î∂ÑÏÑù Ïã§Ìå®:", error);
      setRecommendedStrategies(generateFallbackStrategies());
    } finally {
      setLoading(false);
    }
  };

  // 2-5Îì±Í∏â Ï∂îÏ≤ú ÏÉùÏÑ±
  const generateBasicRecommendations = async (grade: string) => {
    setLoading(true);
    setHasGenerated(true);

    try {
      console.log(`üéØ ${gradeInfo[grade].name} Î∂ÑÏÑù ÏãúÏûë`);
      
      await new Promise((resolve) => setTimeout(resolve, 800));

      let strategies: RecommendStrategy[] = [];
      
      switch (grade) {
        case "2":
          strategies = await lottoRecommendService.generate2ndGradeRecommendations();
          break;
        case "3":
          strategies = await lottoRecommendService.generate3rdGradeRecommendations();
          break;
        case "4":
          strategies = await lottoRecommendService.generate4thGradeRecommendations();
          break;
        case "5":
          strategies = await lottoRecommendService.generate5thGradeRecommendations();
          break;
        default:
          strategies = generateFallbackStrategies(grade);
      }

      setRecommendedStrategies(strategies);
      console.log(`‚úÖ ${gradeInfo[grade].name} Î∂ÑÏÑù ÏôÑÎ£å: ${strategies.length}Í∞ú Ï†ÑÎûµ`);

      if (autoSave && strategies.length > 0) {
        const bestStrategy = strategies[0];
        onAddToPurchaseHistory(bestStrategy.numbers, bestStrategy.name);
        setTimeout(() => {
          showPopup(`ÏûêÎèôÏ†ÄÏû• ÏôÑÎ£å!\n"${bestStrategy.name}" Î≤àÌò∏Í∞Ä ÎÇ¥Î≤àÌò∏Ìï®Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`);
        }, 500);
      }
    } catch (error) {
      console.error(`‚ùå ${gradeInfo[grade].name} Î∂ÑÏÑù Ïã§Ìå®:`, error);
      setRecommendedStrategies(generateFallbackStrategies(grade));
    } finally {
      setLoading(false);
    }
  };

  // Ìè¥Î∞± Ï†ÑÎûµ ÏÉùÏÑ±
  const generateFallbackStrategies = (grade: string = "1"): RecommendStrategy[] => {
    const strategies: RecommendStrategy[] = [];

    for (let i = 0; i < 5; i++) {
      const numbers = generateRandomNumbers();
      strategies.push({
        name: `${gradeInfo[grade].name} Ï†ÑÎûµ ${i + 1}`,
        numbers: numbers,
        grade: gradeInfo[grade].name,
        description: `${gradeInfo[grade].strategy} Î∞©ÏãùÏúºÎ°ú ÏÉùÏÑ±Îêú Î≤àÌò∏`,
        confidence: 70 + Math.floor(Math.random() * 20),
        analysisData: {
          dataRange: `${actualLatestRound}~${actualOldestRound}ÌöåÏ∞® (${totalRounds}Í∞ú)`,
          method: "Í∏∞Î≥∏ Î∂ÑÏÑù",
          patterns: ["ÎπàÎèÑ Î∂ÑÏÑù", "ÎûúÎç§ Ï°∞Ìï©"],
        },
      });
    }

    return strategies;
  };

  // ÎûúÎç§ Î≤àÌò∏ ÏÉùÏÑ±
  const generateRandomNumbers = (): number[] => {
    const numbers = new Set<number>();
    while (numbers.size < 6) {
      numbers.add(Math.floor(Math.random() * 45) + 1);
    }
    return Array.from(numbers).sort((a, b) => a - b);
  };

  // Ï∂îÏ≤ú Î≤àÌò∏ ÏÉùÏÑ±
  const generateRecommendations = (grade: string) => {
    setRecommendedStrategies([]);
    
    if (grade === "1") {
      generate1stGradeRecommendations();
    } else {
      generateBasicRecommendations(grade);
    }
  };

  // Ïã†Î¢∞ÎèÑ Ïä§ÌÉÄÏùº
  const getConfidenceStyle = (confidence: number): { color: string; emoji: string; text: string } => {
    if (confidence >= 95) return { color: currentColors.accent, emoji: "üî•", text: "Ï¥àÍ≥†Ïã†Î¢∞" };
    if (confidence >= 90) return { color: "#0891b2", emoji: "üíé", text: "Í≥†Ïã†Î¢∞" };
    if (confidence >= 85) return { color: "#7c3aed", emoji: "‚≠ê", text: "Ïö∞Ïàò" };
    if (confidence >= 80) return { color: "#dc2626", emoji: "‚ú®", text: "ÏñëÌò∏" };
    return { color: currentColors.textSecondary, emoji: "üìä", text: "Í∏∞Î≥∏" };
  };

  // ÏïÑÏù¥ÏΩò ÎûòÌçº
  const IconWrapper: React.FC<{ 
    children: React.ReactNode; 
    size?: "sm" | "md" | "lg";
    style?: React.CSSProperties;
  }> = ({ children, size = "md", style = {} }) => {
    const sizeMap = { sm: "16px", md: "20px", lg: "24px" };
    return (
      <span
        style={{
          display: "inline-flex",
          alignItems: "center",
          justifyContent: "center",
          width: sizeMap[size],
          height: sizeMap[size],
          fontSize: sizeMap[size],
          lineHeight: "1",
          textAlign: "center" as const,
          ...style,
        }}
      >
        {children}
      </span>
    );
  };

  return (
    <div style={{ padding: "12px" }}>
      {/* ÌåùÏóÖ */}
      <CustomPopup
        isOpen={popup.isOpen}
        onClose={closePopup}
        message={popup.message}
        type={popup.type}
        theme={theme}
      />

      {/* TWA ÎπÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÏãúÏä§ÌÖú Ìó§Îçî */}
      {analysisStats && (
        <div
          style={{
            background: `linear-gradient(135deg, ${currentColors.gradientStart} 0%, ${currentColors.gradientEnd} 100%)`,
            padding: "16px",
            borderRadius: "12px",
            marginBottom: "12px",
            color: "white",
            position: "relative",
            overflow: "hidden",
          }}
        >
          <div
            style={{
              position: "absolute",
              top: "-50%",
              right: "-20%",
              width: "200px",
              height: "200px",
              background: "rgba(255,255,255,0.1)",
              borderRadius: "50%",
              transform: "rotate(45deg)",
            }}
          />

          <div style={{ position: "relative", zIndex: 1 }}>
            <div
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                marginBottom: "8px",
                flexWrap: "wrap",
                gap: "8px",
              }}
            >
              <h3
                style={{
                  fontSize: "18px",
                  fontWeight: "bold",
                  margin: "0",
                  display: "flex",
                  alignItems: "center",
                  gap: "8px",
                  lineHeight: "1.2",
                }}
              >
                <IconWrapper>üß†</IconWrapper>
                <span>TWA AI ÎπÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÏãúÏä§ÌÖú</span>
                <span
                  style={{
                    fontSize: "10px",
                    padding: "2px 6px",
                    backgroundColor: "rgba(255,255,255,0.2)",
                    borderRadius: "4px",
                    fontWeight: "600",
                    lineHeight: "1",
                  }}
                >
                  v2.1
                </span>
              </h3>

              <button
                onClick={() => setShowAnalysisDetail(!showAnalysisDetail)}
                style={{
                  background: "rgba(255,255,255,0.2)",
                  border: "none",
                  color: "white",
                  padding: "4px 8px",
                  borderRadius: "4px",
                  fontSize: "12px",
                  cursor: "pointer",
                  fontWeight: "500",
                }}
              >
                {showAnalysisDetail ? "Í∞ÑÎã®Ìûà" : "ÏûêÏÑ∏Ìûà"}
              </button>
            </div>

            <div style={{ fontSize: "14px", opacity: 0.9, lineHeight: "1.4" }}>
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "12px",
                  flexWrap: "wrap",
                }}
              >
                <span style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                  <IconWrapper size="sm">üìä</IconWrapper>
                  <strong>{actualLatestRound}~{actualOldestRound}</strong>ÌöåÏ∞® Î∂ÑÏÑù
                </span>
                <span style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                  <IconWrapper size="sm">üéØ</IconWrapper>
                  <strong>{(totalRounds * 6).toLocaleString()}</strong>Í∞ú Ìå®ÌÑ¥
                </span>
                <span style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                  <IconWrapper size="sm">üì±</IconWrapper>
                  ÏÉÅÌÉú: <strong>TWA ÏµúÏ†ÅÌôî</strong>
                </span>
              </div>

              {showAnalysisDetail && (
                <div
                  style={{ 
                    marginTop: "12px", 
                    fontSize: "12px", 
                    opacity: 0.8,
                    lineHeight: "1.5" 
                  }}
                >
                  <div style={{ marginBottom: "4px", display: "flex", alignItems: "center", gap: "4px" }}>
                    <IconWrapper size="sm">üìà</IconWrapper>
                    Îç∞Ïù¥ÌÑ∞ Î≤îÏúÑ: {actualLatestRound}ÌöåÏ∞® ~ {actualOldestRound}ÌöåÏ∞® (Ï¥ù {totalRounds}Í∞ú)
                  </div>
                  <div style={{ marginBottom: "4px", display: "flex", alignItems: "flex-start", gap: "4px" }}>
                    <IconWrapper size="sm">üî•</IconWrapper>
                    Ìï´ÎÑòÎ≤Ñ: {analysisStats.hotNumbers?.join(", ") || "7, 27, 38, 3, 6, 9"}
                    <span style={{ margin: "0 4px" }}>|</span>
                    <IconWrapper size="sm">üßä</IconWrapper>
                    ÏΩúÎìúÎÑòÎ≤Ñ: {analysisStats.coldNumbers?.join(", ") || "25, 23, 32, 2, 5"}
                  </div>
                  <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                    <IconWrapper size="sm">üì±</IconWrapper>
                    ÌôòÍ≤Ω: TWA (Trusted Web Activity) ÏµúÏ†ÅÌôî
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Î©îÏù∏ Ï∂îÏ≤ú ÏòÅÏó≠ */}
      <div
        style={{
          backgroundColor: currentColors.surface,
          padding: "16px",
          borderRadius: "12px",
          border: `1px solid ${currentColors.border}`,
          marginBottom: "12px",
          boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
        }}
      >
        <h2
          style={{
            fontSize: "20px",
            fontWeight: "bold",
            color: currentColors.text,
            margin: "0 0 8px 0",
            display: "flex",
            alignItems: "center",
            gap: "8px",
            lineHeight: "1.2",
          }}
        >
          <IconWrapper>üéØ</IconWrapper>
          <span>ÎãπÏ≤® Îì±Í∏âÎ≥Ñ AI Ï∂îÏ≤ú</span>
        </h2>

        <p
          style={{
            fontSize: "14px",
            color: currentColors.textSecondary,
            margin: "0 0 16px 0",
            lineHeight: "1.4",
          }}
        >
          {activeGrade === "1"
            ? `üî• TWA ÌôòÍ≤ΩÏóêÏÑú ${actualLatestRound}~${actualOldestRound}ÌöåÏ∞® (${totalRounds}Í∞ú) ÎπÖÎç∞Ïù¥ÌÑ∞ AI Î∂ÑÏÑù!`
            : `${gradeInfo[activeGrade].name} ÎßûÏ∂§ Î≤àÌò∏Î•º Ïä§ÎßàÌä∏ÌïòÍ≤å Ï∂îÏ≤úÌï¥ÎìúÎ¶ΩÎãàÎã§`}
        </p>

        {/* Îì±Í∏â ÏÑ†ÌÉù Î≤ÑÌäºÎì§ */}
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            gap: "8px",
            marginBottom: "16px",
          }}
        >
          {Object.entries(gradeInfo).map(([grade, info]) => (
            <button
              key={grade}
              onClick={() => {
                setActiveGrade(grade);
                setRecommendedStrategies([]);
                setHasGenerated(false);
              }}
              style={{
                width: "100%",
                padding: "16px",
                borderRadius: "8px",
                textAlign: "left" as const,
                border: activeGrade === grade ? `2px solid ${info.color}` : `2px solid ${currentColors.border}`,
                backgroundColor: activeGrade === grade 
                  ? theme === "dark" ? `${info.color}20` : `${info.color}15`
                  : currentColors.surface,
                cursor: "pointer",
                transition: "all 0.2s",
                boxShadow: activeGrade === grade ? `0 4px 12px ${info.color}30` : "none",
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "space-between",
                  marginBottom: "6px",
                  flexWrap: "wrap",
                  gap: "8px",
                }}
              >
                <div style={{ display: "flex", alignItems: "center", gap: "8px", flexWrap: "wrap" }}>
                  <IconWrapper>{info.emoji}</IconWrapper>
                  <span
                    style={{
                      fontSize: "18px",
                      fontWeight: "bold",
                      color: activeGrade === grade ? info.color : currentColors.text,
                      lineHeight: "1",
                    }}
                  >
                    {info.name}
                  </span>
                  <span
                    style={{
                      fontSize: "12px",
                      padding: "3px 8px",
                      borderRadius: "4px",
                      backgroundColor: activeGrade === grade ? info.color : currentColors.gray,
                      color: activeGrade === grade ? "white" : currentColors.textSecondary,
                      fontWeight: "bold",
                      lineHeight: "1",
                    }}
                  >
                    {info.desc}
                  </span>
                </div>

                {grade === "1" && (
                  <span
                    style={{
                      fontSize: "11px",
                      padding: "4px 8px",
                      borderRadius: "6px",
                      background: "linear-gradient(45deg, #dc2626, #ea580c)",
                      color: "white",
                      fontWeight: "bold",
                      boxShadow: "0 2px 4px rgba(220, 38, 38, 0.3)",
                      display: "flex",
                      alignItems: "center",
                      gap: "4px",
                      lineHeight: "1",
                    }}
                  >
                    <IconWrapper size="sm">üì∫</IconWrapper>
                    TWA Í¥ëÍ≥† ÏãúÏ≤≠
                  </span>
                )}
              </div>

              <div
                style={{
                  fontSize: "13px",
                  color: currentColors.textSecondary,
                  marginBottom: "4px",
                  display: "flex",
                  alignItems: "center",
                  gap: "12px",
                  flexWrap: "wrap",
                  lineHeight: "1.3",
                }}
              >
                <span style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                  <IconWrapper size="sm">üé≤</IconWrapper>
                  ÌôïÎ•†: <strong>{info.probability}</strong>
                </span>
                <span style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                  <IconWrapper size="sm">üí∞</IconWrapper>
                  ÏÉÅÍ∏à: <strong>{info.prize}</strong>
                </span>
              </div>

              <div style={{ 
                fontSize: "12px", 
                color: currentColors.textSecondary,
                display: "flex",
                alignItems: "center",
                gap: "4px",
                lineHeight: "1.3"
              }}>
                <IconWrapper size="sm">üìä</IconWrapper>
                {info.strategy}
              </div>
            </button>
          ))}
        </div>

        {/* Ï∂îÏ≤ú Î≤ÑÌäº */}
        <div style={{ textAlign: "center" as const }}>
          <button
            onClick={() => generateRecommendations(activeGrade)}
            disabled={loading}
            style={{
              background: loading
                ? currentColors.textSecondary
                : activeGrade === "1"
                ? `linear-gradient(45deg, ${currentColors.gradientStart}, ${currentColors.gradientEnd})`
                : gradeInfo[activeGrade].color,
              color: "white",
              padding: "14px 24px",
              borderRadius: "8px",
              border: "none",
              fontWeight: "bold",
              cursor: loading ? "not-allowed" : "pointer",
              fontSize: "16px",
              boxShadow: loading ? "none" : `0 4px 12px ${gradeInfo[activeGrade].color}40`,
              transform: loading ? "none" : "translateY(-1px)",
              transition: "all 0.2s",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              gap: "8px",
              margin: "0 auto",
              lineHeight: "1",
            }}
          >
            {loading ? (
              <>
                <div
                  style={{
                    width: "16px",
                    height: "16px",
                    border: "2px solid #ffffff30",
                    borderTop: "2px solid white",
                    borderRadius: "50%",
                    animation: "spin 1s linear infinite",
                  }}
                />
                <span>
                  {activeGrade === "1"
                    ? "üß† TWA AI Î∂ÑÏÑùÏ§ë..."
                    : `${gradeInfo[activeGrade].name} Î∂ÑÏÑùÏ§ë...`}
                </span>
              </>
            ) : (
              <>
                <IconWrapper>{gradeInfo[activeGrade].emoji}</IconWrapper>
                <span>
                  {activeGrade === "1"
                    ? "üì∫ TWA Í¥ëÍ≥† ÌõÑ AI Î∂ÑÏÑù!"
                    : `${gradeInfo[activeGrade].name} Ï∂îÏ≤ú Î∞õÍ∏∞`}
                </span>
              </>
            )}
          </button>
        </div>
      </div>

      {/* Ï∂îÏ≤ú Í≤∞Í≥º ÏòÅÏó≠ */}
      {loading ? (
        <div
          style={{
            backgroundColor: currentColors.surface,
            borderRadius: "12px",
            padding: "32px 16px",
            textAlign: "center" as const,
            border: `1px solid ${currentColors.border}`,
          }}
        >
          <div
            style={{
              width: "48px",
              height: "48px",
              border: `4px solid ${currentColors.border}`,
              borderTop: `4px solid ${currentColors.accent}`,
              borderRadius: "50%",
              animation: "spin 1s linear infinite",
              margin: "0 auto 16px",
            }}
          />

          <h3
            style={{
              color: currentColors.text,
              margin: "0 0 8px 0",
              fontSize: "18px",
              lineHeight: "1.2",
            }}
          >
            {activeGrade === "1"
              ? `üß† TWA AIÍ∞Ä ${actualLatestRound}~${actualOldestRound}ÌöåÏ∞® (${totalRounds}Í∞ú) Î∂ÑÏÑùÏ§ë...`
              : `${gradeInfo[activeGrade].name} ÎßûÏ∂§ Î≤àÌò∏Î•º ÏÉùÏÑ±Ï§ë...`}
          </h3>

          {activeGrade === "1" && (
            <div style={{ fontSize: "14px", color: currentColors.accent, marginTop: "12px", lineHeight: "1.4" }}>
              <div style={{ margin: "6px 0", display: "flex", alignItems: "center", justifyContent: "center", gap: "8px" }}>
                <div style={{ width: "8px", height: "8px", backgroundColor: currentColors.accent, borderRadius: "50%", animation: "pulse 1.5s infinite" }} />
                <span>Ï†ÑÏ≤¥ Í∏∞Í∞Ñ ÎπàÎèÑ Î∂ÑÏÑù Ï§ë...</span>
              </div>
              <div style={{ margin: "6px 0", display: "flex", alignItems: "center", justifyContent: "center", gap: "8px" }}>
                <div style={{ width: "8px", height: "8px", backgroundColor: "#0891b2", borderRadius: "50%", animation: "pulse 1.5s infinite 0.5s" }} />
                <span>ÏµúÏã† Ìä∏Î†åÎìú Ìå®ÌÑ¥ Ïù∏Ïãù Ï§ë...</span>
              </div>
              <div style={{ margin: "6px 0", display: "flex", alignItems: "center", justifyContent: "center", gap: "8px" }}>
                <div style={{ width: "8px", height: "8px", backgroundColor: "#7c3aed", borderRadius: "50%", animation: "pulse 1.5s infinite 1s" }} />
                <span>TWA AI Î®∏Ïã†Îü¨Îãù ÏòàÏ∏° Ï§ë...</span>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div style={{ display: "flex", flexDirection: "column", gap: "12px" }}>
          {recommendedStrategies.map((strategy, index) => {
            const confStyle = getConfidenceStyle(strategy.confidence);

            return (
              <div
                key={index}
                style={{
                  backgroundColor: currentColors.surface,
                  borderRadius: "12px",
                  padding: "16px",
                  border: strategy.confidence >= 90 ? `2px solid ${confStyle.color}` : `1px solid ${currentColors.border}`,
                  boxShadow: strategy.confidence >= 90 ? `0 4px 16px ${confStyle.color}20` : "0 2px 8px rgba(0,0,0,0.1)",
                  position: "relative",
                  overflow: "hidden",
                }}
              >
                {/* Í≥†Ïã†Î¢∞ÎèÑ Î∞∞ÏßÄ */}
                {strategy.confidence >= 90 && (
                  <div
                    style={{
                      position: "absolute",
                      top: "0",
                      right: "0",
                      background: `linear-gradient(45deg, ${confStyle.color}, ${confStyle.color}dd)`,
                      color: "white",
                      padding: "4px 12px",
                      fontSize: "10px",
                      fontWeight: "bold",
                      clipPath: "polygon(0 0, 100% 0, 100% 70%, 85% 100%, 0 100%)",
                      display: "flex",
                      alignItems: "center",
                      gap: "2px",
                      lineHeight: "1",
                      zIndex: 1,
                    }}
                  >
                    <IconWrapper size="sm">{confStyle.emoji}</IconWrapper>
                    {confStyle.text}
                  </div>
                )}

                <div style={{ display: "flex", alignItems: "flex-start", justifyContent: "space-between", marginBottom: "12px", gap: "12px", flexWrap: "wrap" }}>
                  <div style={{ flex: 1, minWidth: "200px" }}>
                    <div style={{ display: "flex", alignItems: "center", gap: "8px", marginBottom: "6px", flexWrap: "wrap" }}>
                      <h3 style={{ fontWeight: "bold", color: currentColors.text, margin: "0", fontSize: "16px", lineHeight: "1.2" }}>
                        {strategy.name}
                      </h3>
                      <span
                        style={{
                          fontSize: "12px",
                          padding: "3px 8px",
                          borderRadius: "6px",
                          backgroundColor: confStyle.color,
                          color: "white",
                          fontWeight: "bold",
                          display: "flex",
                          alignItems: "center",
                          gap: "4px",
                          lineHeight: "1",
                        }}
                      >
                        <IconWrapper size="sm">{confStyle.emoji}</IconWrapper>
                        {strategy.confidence}%
                      </span>
                    </div>

                    <p style={{ fontSize: "13px", color: currentColors.textSecondary, margin: "0 0 8px 0", lineHeight: "1.4" }}>
                      {strategy.description}
                    </p>

                    <div style={{ fontSize: "11px", color: currentColors.textSecondary, display: "flex", gap: "12px", flexWrap: "wrap", lineHeight: "1.3" }}>
                      <span style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                        <IconWrapper size="sm">üìä</IconWrapper>
                        {strategy.analysisData.dataRange}
                      </span>
                      <span style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                        <IconWrapper size="sm">üîç</IconWrapper>
                        {strategy.analysisData.method}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Î≤àÌò∏ ÌëúÏãú */}
                <div
                  style={{
                    display: "flex",
                    gap: "6px",
                    justifyContent: "center",
                    flexWrap: "wrap",
                    backgroundColor: currentColors.gray,
                    padding: "12px",
                    borderRadius: "8px",
                    marginBottom: "12px",
                    border: `2px dashed ${currentColors.grayBorder}`,
                  }}
                >
                  {strategy.numbers.map((num, i) => (
                    <LottoNumberBall key={i} number={num} size="md" theme={theme} />
                  ))}
                </div>

                {/* ÎÇ¥Î≤àÌò∏Ìï® Ï∂îÍ∞Ä Î≤ÑÌäº */}
                <div style={{ display: "flex", justifyContent: "center", marginBottom: "12px" }}>
                  <button
                    onClick={() => {
                      onAddToPurchaseHistory(strategy.numbers, strategy.name);
                      showPopup("ÎÇ¥Î≤àÌò∏Ìï®Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!");
                    }}
                    style={{
                      background: `linear-gradient(45deg, ${currentColors.primary}, #3b82f6)`,
                      color: "white",
                      padding: "10px 16px",
                      borderRadius: "8px",
                      border: "none",
                      fontSize: "13px",
                      cursor: "pointer",
                      fontWeight: "bold",
                      boxShadow: "0 2px 8px rgba(37, 99, 235, 0.3)",
                      transition: "all 0.2s",
                      display: "flex",
                      alignItems: "center",
                      gap: "6px",
                      lineHeight: "1",
                      minWidth: "120px",
                      justifyContent: "center",
                    }}
                  >
                    <IconWrapper size="sm">üóÇÔ∏è</IconWrapper>
                    ÎÇ¥Î≤àÌò∏Ìï®Ïóê Ï∂îÍ∞Ä
                  </button>
                </div>

                {/* Î∂ÑÏÑù Ìå®ÌÑ¥ ÌÉúÍ∑∏Îì§ */}
                <div style={{ display: "flex", gap: "6px", flexWrap: "wrap", alignItems: "center", lineHeight: "1.3" }}>
                  <span style={{ fontSize: "11px", color: currentColors.textSecondary, fontWeight: "500", display: "flex", alignItems: "center", gap: "4px" }}>
                    <IconWrapper size="sm">üè∑Ô∏è</IconWrapper>
                    Î∂ÑÏÑù Ìå®ÌÑ¥:
                  </span>
                  {strategy.analysisData.patterns.map((pattern, i) => (
                    <span
                      key={i}
                      style={{
                        fontSize: "10px",
                        padding: "3px 8px",
                        borderRadius: "4px",
                        backgroundColor: currentColors.gray,
                        color: currentColors.textSecondary,
                        border: `1px solid ${currentColors.grayBorder}`,
                        lineHeight: "1",
                      }}
                    >
                      {pattern}
                    </span>
                  ))}
                </div>

                {strategy.analysisData.specialInfo && (
                  <div
                    style={{
                      marginTop: "8px",
                      fontSize: "11px",
                      color: currentColors.accent,
                      fontWeight: "500",
                      display: "flex",
                      alignItems: "center",
                      gap: "4px",
                      lineHeight: "1.3",
                    }}
                  >
                    <IconWrapper size="sm">‚ú®</IconWrapper>
                    {strategy.analysisData.specialInfo}
                  </div>
                )}
              </div>
            );
          })}

          {/* Ï∂îÏ≤úÏù¥ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏùÑ Îïå */}
          {recommendedStrategies.length === 0 && !hasGenerated && (
            <div
              style={{
                textAlign: "center" as const,
                padding: "48px 16px",
                backgroundColor: currentColors.surface,
                borderRadius: "12px",
                border: `1px solid ${currentColors.border}`,
              }}
            >
              <div style={{ fontSize: "64px", marginBottom: "16px", display: "flex", justifyContent: "center", alignItems: "center", height: "80px" }}>
                <IconWrapper size="lg" style={{ fontSize: "64px" }}>
                  {gradeInfo[activeGrade].emoji}
                </IconWrapper>
              </div>
              <h3 style={{ fontSize: "20px", fontWeight: "bold", color: currentColors.text, margin: "0 0 8px 0", lineHeight: "1.2" }}>
                {gradeInfo[activeGrade].name} Ï∂îÏ≤úÎ≤àÌò∏
              </h3>
              <p style={{ color: currentColors.textSecondary, margin: "0 0 6px 0", fontSize: "14px", lineHeight: "1.4" }}>
                ÌôïÎ•†: {gradeInfo[activeGrade].probability}
              </p>
              <p style={{ color: currentColors.textSecondary, margin: "0 0 24px 0", fontSize: "14px", lineHeight: "1.4" }}>
                ÏòàÏÉÅÏÉÅÍ∏à: {gradeInfo[activeGrade].prize}
              </p>
              <p style={{ color: currentColors.textSecondary, margin: "0 0 24px 0", fontSize: "13px", fontStyle: "italic", lineHeight: "1.4" }}>
                {activeGrade === "1"
                  ? "ÏúÑÏùò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ TWA Í¥ëÍ≥† ÏãúÏ≤≠ ÌõÑ AI Î∂ÑÏÑùÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî!"
                  : "ÏúÑÏùò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ AI Î∂ÑÏÑùÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî!"}
              </p>
            </div>
          )}
        </div>
      )}

      {/* CSS Ïï†ÎãàÎ©îÏù¥ÏÖò */}
      <style>
        {`
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
          @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
          }
        `}
      </style>
    </div>
  );
};

export default Recommend;
